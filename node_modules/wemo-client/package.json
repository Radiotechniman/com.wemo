{
  "_args": [
    [
      {
        "raw": "https://github.com/timonreinhard/wemo-client.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/timonreinhard/wemo-client.git",
        "spec": "git+https://github.com/timonreinhard/wemo-client.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:timonreinhard/wemo-client.git",
          "sshUrl": "git+ssh://git@github.com/timonreinhard/wemo-client.git",
          "httpsUrl": "git+https://github.com/timonreinhard/wemo-client.git",
          "gitUrl": "git://github.com/timonreinhard/wemo-client.git",
          "shortcut": "github:timonreinhard/wemo-client",
          "directUrl": "https://raw.githubusercontent.com/timonreinhard/wemo-client/master/package.json"
        }
      },
      "/Users/baskiers/athom/com.wemo"
    ]
  ],
  "_from": "git+https://github.com/timonreinhard/wemo-client.git",
  "_id": "wemo-client@0.11.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/wemo-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/timonreinhard/wemo-client.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/timonreinhard/wemo-client.git",
    "spec": "git+https://github.com/timonreinhard/wemo-client.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:timonreinhard/wemo-client.git",
      "sshUrl": "git+ssh://git@github.com/timonreinhard/wemo-client.git",
      "httpsUrl": "git+https://github.com/timonreinhard/wemo-client.git",
      "gitUrl": "git://github.com/timonreinhard/wemo-client.git",
      "shortcut": "github:timonreinhard/wemo-client",
      "directUrl": "https://raw.githubusercontent.com/timonreinhard/wemo-client/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/timonreinhard/wemo-client.git#c8980e826ab5293affb94e9ee85dd2fd5f6bf9ca",
  "_shasum": "c8d3d2f82b2e6474f455af2cbe5b65cfa1e5b3cb",
  "_shrinkwrap": null,
  "_spec": "https://github.com/timonreinhard/wemo-client.git",
  "_where": "/Users/baskiers/athom/com.wemo",
  "author": {
    "name": "Timon Reinhard"
  },
  "bugs": {
    "url": "https://github.com/timonreinhard/wemo-client/issues"
  },
  "dependencies": {
    "debug": "~2.2.0",
    "entities": "^1.1.1",
    "node-ssdp": "~2.8.0",
    "xml2js": "~0.4.16",
    "xmlbuilder": "^8.2.2"
  },
  "description": "Client library for interacting with Belkin Wemo devices",
  "devDependencies": {
    "codeclimate-test-reporter": "^0.1.1",
    "eslint": "^3.2.2",
    "husky": "^0.10.2",
    "istanbul": "^0.4.4",
    "mitm": "^1.3.0",
    "mocha": "^3.0.2",
    "must": "^0.13.2"
  },
  "directories": {
    "examples": "./examples"
  },
  "gitHead": "c8980e826ab5293affb94e9ee85dd2fd5f6bf9ca",
  "homepage": "https://github.com/timonreinhard/wemo-client",
  "keywords": [
    "wemo"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "wemo-client",
  "optionalDependencies": {},
  "readme": "# Wemo Client for Node.js\n\nLow-level client library for controlling recent Wemo devices including Bulbs. Supports event subscriptions to get live updates from devices.\n\n[![Build Status](https://travis-ci.org/timonreinhard/wemo-client.svg?branch=master)](https://travis-ci.org/timonreinhard/wemo-client)\n[![codecov](https://codecov.io/gh/timonreinhard/wemo-client/branch/master/graph/badge.svg)](https://codecov.io/gh/timonreinhard/wemo-client)\n\n## Supported Devices\n\n  * Wemo Switch\n  * Wemo Motion\n  * Wemo Insight Switch\n  * Wemo Maker\n  * Wemo Link\n    * Wemo LED Bulb\n    * OSRAM Lightify Flex RGBW\n    * OSRAM Lightify Tunable White (untested)\n    * OSRAM Gardenspot Mini RGB (untested)\n  * Wemo Light Switch\n\n## Install\n\n```bash\n$ npm install wemo-client\n```\n\n## Usage\n\n```javascript\nvar Wemo = require('wemo-client');\nvar wemo = new Wemo();\n\nwemo.discover(function(deviceInfo) {\n  console.log('Wemo Device Found: %j', deviceInfo);\n\n  // Get the client for the found device\n  var client = wemo.client(deviceInfo);\n\n  // Handle BinaryState events\n  client.on('binaryState', function(value) {\n    console.log('Binary State changed to: %s', value);\n  });\n\n  // Turn the switch on\n  client.setBinaryState(1);\n});\n```\n\n## API\n\n### Wemo\n\n#### new Wemo([opts])\n\nCreate the Wemo instance. An optional object containing options can be specified. Available options include `port` which will provide a port to bind to for listening to UPnP events (the default is to listen on any available randomly selected port.) Discovery options for `node-ssdp` can also be specified as `discover_opts`.\n\nExample of options:\n\n```\n{\n  port: 1234,\n  discover_opts: {\n    unicastBindPort: 1235\n  }\n}\n```\n\n* **Object** *options* Options\n\n#### DEVICE_TYPE\n\nStatic map of supported models and device types.\n\n* Bridge\n* Switch\n* Motion\n* Maker\n* Insight\n* LightSwitch\n\n#### discover(cb)\n\nDiscover Wemo devices via UPnP. A `deviceInfo` will be passed to `cb` that can be used to get a client for the device found.\n\n* **Callback** *cb* Callback called with for every single device found.\n\nDue to the nature of UPnP it may be required to call this method multiple times to discover actually all devices connected to the local network.\n\nThe callback will only be called for newly found devices (those that have not been detected by a previous call to `discover`). Except for devices that have been lost in an error state as those will reappear again when coming back online (e.g. because their IP/port have changed).\n\n#### load(setupUrl, cb)\n\nAllows to skip discovery if the `setupUrl` of a Wemo is already known. A `deviceInfo` will be passed to `cb` that can be used to get a client for the device found.\n\n* **String** *setupUrl* Must point to setup.xml of the requested device (`http://device_ip:device_port/setup.xml`).\n* **Callback** *cb*\n\n#### client(deviceInfo)\n\nGet a single instance of [WemoClient](#wemoclient) for the device specified by `deviceInfo`.\n\n* **Object** *deviceInfo* The `deviceInfo` as returned by the discovery.\n\n### WemoClient\n\n#### Event: binaryState (value)\n\nBinary state of a device has been updated, e.g. a motion sensor detected motion or a plug is switched on.\n\n* **String** *value* The state of the binary switch/sensor. `1` = on/closed/motion, `0` = off/open/quiet\n\n```javascript\nclient.on('binaryState', function(value) {\n  console.log('Device turned %s', value === '1' ? 'on' : 'off')\n});\n```\n\n#### Event: statusChange (deviceId, capabilityId, value)\n\nCapability of a device connected via Wemo Bridge changed its status.\n\n* **String** *deviceId* Id of the device connected to the bridge\n* **String** *capabilityId* Capability\n* **String** *value* Status\n\n#### Event: attributeList (name, value, prevalue, timestamp)\n\nAttribute of a device has changed. This seems to apply to Wemo Maker only for now.\n\n* **String** *name* Name of the attribute, e.g. `Switch`\n* **String** *value* Current value\n* **String** *prevalue* Previous value\n* **String** *timestamp* Timestamp of the change\n\n#### Event: insightParams (binaryState, instantPower, data)\n\nWemo Insight Switch sent new power consumption data.\n\n* **String** *binaryState* `1` = on, `0` = off, `8` = standby\n* **String** *instantPower* Current power consumption in mW\n* **Object** *data* Aggregated usage data\n\n#### Event: error (err)\n\nAn error occured while handling the event subscriptions or calling a device action.\nWhen `err.code` is one of `ECONNREFUSED`, `EHOSTUNREACH` or `ETIMEDOUT` the device\nlikely went offline.\n\n* **Object** *err*\n\n#### getEndDevices(cb)\n\nGet bulbs connected to a Wemo Bridge. An `endDeviceInfo` for every device paired is passed to the callback in an array, e.g.:\n```javascript\n[{\n  friendlyName: 'Color Bulb',\n  deviceId: 'EA103EA2B2782FFF'\n  capabilities: {\n    '10006': '1'\n    '10008': '121:0'\n  },\n  deviceType: 'dimmableLight'\n}]\n```\n\nDevice groups are treated as if they were single devices â€“ a sole `endDeviceInfo` is returned per group.\n\n*Notice:* The `capabilities` property may represent outdated values due to some odd behavior of the device API. Please refer to [getDeviceStatus](#getdevicestatusdeviceid-cb) or [Event: statusChange](#event-statuschange-deviceid-capabilityid-value) to obtain the current state of the device.\n\n* **Callback** *cb* cb(err, endDeviceInfos)\n\n#### getBinaryState(cb)\n\nGet the device's binary state.\n\n* **Callback** *cb* cb(err, state)\n\nThe callback is passed the `state` (`1` = on, `0` = off).\n\n#### setBinaryState(value, [cb])\n\nTurn the device on or off. Will also cause a `binaryState` event to be triggered.\n\n* **String** *value* `1` = on, `0` = off\n* **Callback** *cb* cb(err, response)\n\n#### getAttributes(cb)\n\nGet the device attributes of a Wemo Maker.\n\n* **Callback** *cb* cb(err, attributes)\n\n#### getDeviceStatus(deviceId, cb)\n\nGets the device Status of a device connected via Wemo Bridge, e.g. a bulb.\n\n* **String** *deviceId* Id of the device connected to the bridge (determined by calling [getEndDevices](#getenddevicescb))\n* **Callback** *cb* cb(err, deviceStatus)\n\nThe callback is passed the `deviceStatus` which is a map of device capabilities and values, e.g.:\n```javascript\n{\n  '10006': '1', // on = 1, off = 0, offline = empty\n  '10008': '121:0', // brightness 0-255\n  '30008': '0:0', // no sleep timer active\n  '30009': '', // unknown\n  '3000A': '' // unknown\n}\n```\n\n#### setDeviceStatus(deviceId, capability, value, [cb])\n\nControls a capability of a device connected via Wemo Bridge, e.g. a bulb.\n\n* **String** *deviceId* Id of the device connected to the bridge (determined by calling [getEndDevices](#getenddevicescb))\n* **String** *capability* Capability\n* **String** *value* Value\n* **Callback** *cb* cb(err, response)\n\nKnown capabilities (depends on device):\n\n* **10006** Turn bulb on/off. Values: `1` = on, `0` = off\n* **10008** Dim bulb. Value: `brightness:transition_time`, where `brightness` = 0-255\n* **30008** Sleep timer. Value: `seconds*10:current_unixtime`\n* **10300** Color. Value: `X:Y:transistion_time`\n* **30301** Color Temperature. Value: `ct:transition_time`, where `ct` = 170-370\n\n#### setLightColor(deviceId, red, green, blue, [cb])\n\nConvenience function for setting the color of a RGB light.\n\n* **String** *deviceId* Id of the light connected to the bridge (determined by calling [getEndDevices](#getenddevicescb))\n* **Number** *red* 0-255\n* **Number** *green* 0-255\n* **Number** *blue* 0-255\n* **Callback** *cb* cb(err, response)\n\n#### getInsightParams(cb)\n\nGet power consumption data for a Wemo Insight Switch\n\n* **Callback** *cb* cb(err, binaryState, instantPower, data)\n\nThe callback is passed the `binaryState`, `instantPower` and `data` (see [Event: InsightParams](#event-insightparams-binarystate-instantpower-data))\n\n## Debugging\n\nWemo Client uses [debug](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `wemo-client`.\n\n```bash\n$ env DEBUG=wemo-client node examples/index.js\n```\n## Known Issues\n\nThere are some quirks and oddities to be aware of when working with the devices supported by this library.\n\n### General\n\n* The `deviceInfo` returned from the discovery may contain a device state property (e.g. `binaryState`) which has an outdated value most of the time. Just don't use it.\n\n### Wemo Link\n\n* The `capabilities` property of the `endDeviceInfo` may represent outdated values. Please use the `getDeviceStatus` method or subscribe to `statusChange` events to obtain the current state of the device.\n\n* Setting capability `10008` (level/brightness) to `> 0` will turn the light on, but won't update capability `10006` (on/off). In other words, a light turned on by dimming it, will still be reported as off by the `deviceStatus`.\n\n* Setting capability `10008` to `0` will turn the light off, but won't cause _any update_ of the `deviceStatus`. That is the light will still be reported as on and dimmed.\n\n## Contributing\n\nContributions are very welcome! Please note that by submitting a pull request for this project, you agree to license your contribution under the [MIT License](https://github.com/timonreinhard/wemo-client/blob/master/LICENSE) to this project.\n\n## Credits\n\nCredit goes to [Ben Hardill](http://www.hardill.me.uk/wordpress/tag/wemo/) for his research on Belkin Wemo devices.\n\n## License\n\nPublished under the [MIT License](https://github.com/timonreinhard/wemo-client/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/timonreinhard/wemo-client.git"
  },
  "scripts": {
    "lint": "eslint *.js",
    "postmerge": "npm install",
    "postversion": "git push && git push --tags",
    "prepush": "npm run lint && npm test",
    "preversion": "npm test",
    "test": "istanbul test _mocha",
    "test-cov": "istanbul cover _mocha",
    "test-e2e": "mocha ./test-e2e"
  },
  "version": "0.11.2"
}
